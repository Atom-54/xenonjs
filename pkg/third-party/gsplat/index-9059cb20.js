(function(){const U=document.createElement("link").relList;if(U&&U.supports&&U.supports("modulepreload"))return;for(const l of document.querySelectorAll('link[rel="modulepreload"]'))t(l);new MutationObserver(l=>{for(const i of l)if(i.type==="childList")for(const W of i.addedNodes)W.tagName==="LINK"&&W.rel==="modulepreload"&&t(W)}).observe(document,{childList:!0,subtree:!0});function F(l){const i={};return l.integrity&&(i.integrity=l.integrity),l.referrerPolicy&&(i.referrerPolicy=l.referrerPolicy),l.crossOrigin==="use-credentials"?i.credentials="include":l.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function t(l){if(l.ep)return;l.ep=!0;const i=F(l);fetch(l.href,i)}})();class s{constructor(U=0,F=0,t=0){this.x=U,this.y=F,this.z=t}equals(U){return this.x===U.x&&this.y===U.y&&this.z===U.z}add(U){return typeof U=="number"?new s(this.x+U,this.y+U,this.z+U):new s(this.x+U.x,this.y+U.y,this.z+U.z)}subtract(U){return typeof U=="number"?new s(this.x-U,this.y-U,this.z-U):new s(this.x-U.x,this.y-U.y,this.z-U.z)}multiply(U){return typeof U=="number"?new s(this.x*U,this.y*U,this.z*U):new s(this.x*U.x,this.y*U.y,this.z*U.z)}lerp(U,F){return new s(this.x+(U.x-this.x)*F,this.y+(U.y-this.y)*F,this.z+(U.z-this.z)*F)}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(U){return Math.sqrt((this.x-U.x)**2+(this.y-U.y)**2+(this.z-U.z)**2)}normalize(){const U=this.length();return new s(this.x/U,this.y/U,this.z/U)}flat(){return[this.x,this.y,this.z]}clone(){return new s(this.x,this.y,this.z)}}class k{constructor(U=0,F=0,t=0,l=1){this.x=U,this.y=F,this.z=t,this.w=l}equals(U){return this.x===U.x&&this.y===U.y&&this.z===U.z&&this.w===U.w}normalize(){const U=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new k(this.x/U,this.y/U,this.z/U,this.w/U)}multiply(U){const F=this.w,t=this.x,l=this.y,i=this.z,W=U.w,R=U.x,Q=U.y,Z=U.z;return new k(F*R+t*W+l*Z-i*Q,F*Q-t*Z+l*W+i*R,F*Z+t*Q-l*R+i*W,F*W-t*R-l*Q-i*Z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new k(this.x,this.y,this.z,this.w)}static FromEuler(U){const F=U.x/2,t=U.y/2,l=U.z/2,i=Math.cos(t),W=Math.sin(t),R=Math.cos(F),Q=Math.sin(F),Z=Math.cos(l),n=Math.sin(l);return new k(i*Q*Z+W*R*n,W*R*Z-i*Q*n,i*R*n-W*Q*Z,i*R*Z+W*Q*n)}toEuler(){const U=2*(this.w*this.x+this.y*this.z),F=1-2*(this.x*this.x+this.y*this.y),t=Math.atan2(U,F);let l;const i=2*(this.w*this.y-this.z*this.x);l=Math.abs(i)>=1?Math.sign(i)*Math.PI/2:Math.asin(i);const W=2*(this.w*this.z+this.x*this.y),R=1-2*(this.y*this.y+this.z*this.z),Q=Math.atan2(W,R);return new s(t,l,Q)}static FromMatrix3(U){const F=U.buffer,t=F[0]+F[4]+F[8];let l,i,W,R;if(t>0){const Q=.5/Math.sqrt(t+1);R=.25/Q,l=(F[7]-F[5])*Q,i=(F[2]-F[6])*Q,W=(F[3]-F[1])*Q}else if(F[0]>F[4]&&F[0]>F[8]){const Q=2*Math.sqrt(1+F[0]-F[4]-F[8]);R=(F[7]-F[5])/Q,l=.25*Q,i=(F[1]+F[3])/Q,W=(F[2]+F[6])/Q}else if(F[4]>F[8]){const Q=2*Math.sqrt(1+F[4]-F[0]-F[8]);R=(F[2]-F[6])/Q,l=(F[1]+F[3])/Q,i=.25*Q,W=(F[5]+F[7])/Q}else{const Q=2*Math.sqrt(1+F[8]-F[0]-F[4]);R=(F[3]-F[1])/Q,l=(F[2]+F[6])/Q,i=(F[5]+F[7])/Q,W=.25*Q}return new k(l,i,W,R)}}class UF{constructor(){const U=new Map;this.addEventListener=(F,t)=>{U.has(F)||U.set(F,new Set),U.get(F).add(t)},this.removeEventListener=(F,t)=>{U.has(F)&&U.get(F).delete(t)},this.hasEventListener=(F,t)=>!!U.has(F)&&U.get(F).has(t),this.dispatchEvent=F=>{if(U.has(F.type))for(const t of U.get(F.type))t(F)}}}class ZF extends UF{constructor(){super(),this._position=new s,this._rotation=new k,this._changeEvent={type:"change"}}get position(){return this._position}set position(U){this._position.equals(U)||(this._position=U,this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(U){this._rotation.equals(U)||(this._rotation=U,this.dispatchEvent(this._changeEvent))}}class N{constructor(U=1,F=0,t=0,l=0,i=1,W=0,R=0,Q=0,Z=1){this.buffer=[U,F,t,l,i,W,R,Q,Z]}equals(U){if(this.buffer.length!==U.buffer.length)return!1;if(this.buffer===U.buffer)return!0;for(let F=0;F<this.buffer.length;F++)if(this.buffer[F]!==U.buffer[F])return!1;return!0}multiply(U){const F=this.buffer,t=U.buffer;return new N(t[0]*F[0]+t[3]*F[1]+t[6]*F[2],t[1]*F[0]+t[4]*F[1]+t[7]*F[2],t[2]*F[0]+t[5]*F[1]+t[8]*F[2],t[0]*F[3]+t[3]*F[4]+t[6]*F[5],t[1]*F[3]+t[4]*F[4]+t[7]*F[5],t[2]*F[3]+t[5]*F[4]+t[8]*F[5],t[0]*F[6]+t[3]*F[7]+t[6]*F[8],t[1]*F[6]+t[4]*F[7]+t[7]*F[8],t[2]*F[6]+t[5]*F[7]+t[8]*F[8])}clone(){const U=this.buffer;return new N(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8])}static Eye(U=1){return new N(U,0,0,0,U,0,0,0,U)}static Diagonal(U){return new N(U.x,0,0,0,U.y,0,0,0,U.z)}static RotationFromQuaternion(U){return new N(1-2*U.y*U.y-2*U.z*U.z,2*U.x*U.y-2*U.z*U.w,2*U.x*U.z+2*U.y*U.w,2*U.x*U.y+2*U.z*U.w,1-2*U.x*U.x-2*U.z*U.z,2*U.y*U.z-2*U.x*U.w,2*U.x*U.z-2*U.y*U.w,2*U.y*U.z+2*U.x*U.w,1-2*U.x*U.x-2*U.y*U.y)}static RotationFromEuler(U){const F=Math.cos(U.x),t=Math.sin(U.x),l=Math.cos(U.y),i=Math.sin(U.y),W=Math.cos(U.z),R=Math.sin(U.z);return new N(l*W+i*t*R,-l*R+i*t*W,i*F,F*R,F*W,-t,-i*W+l*t*R,i*R+l*t*W,l*F)}}class H{constructor(U=1,F=0,t=0,l=0,i=0,W=1,R=0,Q=0,Z=0,n=0,d=1,a=0,V=0,h=0,X=0,B=1){this.buffer=[U,F,t,l,i,W,R,Q,Z,n,d,a,V,h,X,B]}equals(U){if(this.buffer.length!==U.buffer.length)return!1;if(this.buffer===U.buffer)return!0;for(let F=0;F<this.buffer.length;F++)if(this.buffer[F]!==U.buffer[F])return!1;return!0}multiply(U){const F=this.buffer,t=U.buffer;return new H(t[0]*F[0]+t[1]*F[4]+t[2]*F[8]+t[3]*F[12],t[0]*F[1]+t[1]*F[5]+t[2]*F[9]+t[3]*F[13],t[0]*F[2]+t[1]*F[6]+t[2]*F[10]+t[3]*F[14],t[0]*F[3]+t[1]*F[7]+t[2]*F[11]+t[3]*F[15],t[4]*F[0]+t[5]*F[4]+t[6]*F[8]+t[7]*F[12],t[4]*F[1]+t[5]*F[5]+t[6]*F[9]+t[7]*F[13],t[4]*F[2]+t[5]*F[6]+t[6]*F[10]+t[7]*F[14],t[4]*F[3]+t[5]*F[7]+t[6]*F[11]+t[7]*F[15],t[8]*F[0]+t[9]*F[4]+t[10]*F[8]+t[11]*F[12],t[8]*F[1]+t[9]*F[5]+t[10]*F[9]+t[11]*F[13],t[8]*F[2]+t[9]*F[6]+t[10]*F[10]+t[11]*F[14],t[8]*F[3]+t[9]*F[7]+t[10]*F[11]+t[11]*F[15],t[12]*F[0]+t[13]*F[4]+t[14]*F[8]+t[15]*F[12],t[12]*F[1]+t[13]*F[5]+t[14]*F[9]+t[15]*F[13],t[12]*F[2]+t[13]*F[6]+t[14]*F[10]+t[15]*F[14],t[12]*F[3]+t[13]*F[7]+t[14]*F[11]+t[15]*F[15])}clone(){const U=this.buffer;return new H(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8],U[9],U[10],U[11],U[12],U[13],U[14],U[15])}}class VF extends ZF{constructor(U=new s(0,0,-5),F=new k,t=1132,l=1132,i=.1,W=100){super();const R=()=>{const Q=N.RotationFromQuaternion(this.rotation).buffer,Z=this.position.flat(),n=[[Q[0],Q[1],Q[2],0],[Q[3],Q[4],Q[5],0],[Q[6],Q[7],Q[8],0],[-Z[0]*Q[0]-Z[1]*Q[3]-Z[2]*Q[6],-Z[0]*Q[1]-Z[1]*Q[4]-Z[2]*Q[7],-Z[0]*Q[2]-Z[1]*Q[5]-Z[2]*Q[8],1]].flat();return new H(...n)};this.position=U,this.rotation=F,this.fx=t,this.fy=l,this.near=i,this.far=W,this.projectionMatrix=new H,this.viewMatrix=new H,this.viewProj=new H,this.update=(Q,Z)=>{this.projectionMatrix=new H(2*this.fx/Q,0,0,0,0,-2*this.fy/Z,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this.viewMatrix=R(),this.viewProj=this.projectionMatrix.multiply(this.viewMatrix)}}}class D extends UF{constructor(){super();const U=new Float32Array(1),F=new Int32Array(U.buffer),t=W=>{U[0]=W;const R=F[0],Q=R>>23&255;let Z,n=8388607&R;return Q==0?Z=0:Q<113?(Z=0,n|=8388608,n>>=113-Q,16777216&n&&(Z=1,n=0)):Q<142?Z=Q-112:(Z=31,n=0),(R>>31&1)<<15|Z<<10|n>>13},l=(W,R)=>(t(W)|t(R)<<16)>>>0,i={type:"change"};this._data=new Uint32Array(0),this._vertexCount=0,this._width=2048,this._height=0,this._positions=new Float32Array(0),this._rotations=new Float32Array(0),this._scales=new Float32Array(0),this.setData=W=>{this._vertexCount=W.length/D.RowLength,this._height=Math.ceil(2*this._vertexCount/this._width),this._data=new Uint32Array(this._width*this._height*4),this._positions=new Float32Array(3*this._vertexCount),this._rotations=new Float32Array(4*this._vertexCount),this._scales=new Float32Array(3*this._vertexCount);const R=new Float32Array(W.buffer),Q=new Uint8Array(W.buffer),Z=new Uint8Array(this._data.buffer),n=new Float32Array(this._data.buffer);for(let d=0;d<this._vertexCount;d++){this._positions[3*d+0]=R[8*d+0],this._positions[3*d+1]=R[8*d+1],this._positions[3*d+2]=R[8*d+2],this._rotations[4*d+0]=(Q[32*d+28+0]-128)/128,this._rotations[4*d+1]=(Q[32*d+28+1]-128)/128,this._rotations[4*d+2]=(Q[32*d+28+2]-128)/128,this._rotations[4*d+3]=(Q[32*d+28+3]-128)/128,this._scales[3*d+0]=R[8*d+3+0],this._scales[3*d+1]=R[8*d+3+1],this._scales[3*d+2]=R[8*d+3+2],n[8*d+0]=this._positions[3*d+0],n[8*d+1]=this._positions[3*d+1],n[8*d+2]=this._positions[3*d+2],Z[4*(8*d+7)+0]=Q[32*d+24+0],Z[4*(8*d+7)+1]=Q[32*d+24+1],Z[4*(8*d+7)+2]=Q[32*d+24+2],Z[4*(8*d+7)+3]=Q[32*d+24+3];const a=N.RotationFromQuaternion(new k(this._rotations[4*d+1],this._rotations[4*d+2],this._rotations[4*d+3],-this._rotations[4*d+0])),V=N.Diagonal(new s(this._scales[3*d+0],this._scales[3*d+1],this._scales[3*d+2])).multiply(a).buffer,h=[V[0]*V[0]+V[3]*V[3]+V[6]*V[6],V[0]*V[1]+V[3]*V[4]+V[6]*V[7],V[0]*V[2]+V[3]*V[5]+V[6]*V[8],V[1]*V[1]+V[4]*V[4]+V[7]*V[7],V[1]*V[2]+V[4]*V[5]+V[7]*V[8],V[2]*V[2]+V[5]*V[5]+V[8]*V[8]];this._data[8*d+4]=l(4*h[0],4*h[1]),this._data[8*d+5]=l(4*h[2],4*h[3]),this._data[8*d+6]=l(4*h[4],4*h[5])}this.dispatchEvent(i)},this.translate=W=>{const R=new Float32Array(this._data.buffer);for(let Q=0;Q<this._vertexCount;Q++)this._positions[3*Q+0]+=W.x,this._positions[3*Q+1]+=W.y,this._positions[3*Q+2]+=W.z,R[8*Q+0]=this._positions[3*Q+0],R[8*Q+1]=this._positions[3*Q+1],R[8*Q+2]=this._positions[3*Q+2];this.dispatchEvent(i)},this.rotate=W=>{const R=N.RotationFromQuaternion(W).buffer,Q=new Float32Array(this._data.buffer);for(let Z=0;Z<this._vertexCount;Z++){const n=this._positions[3*Z+0],d=this._positions[3*Z+1],a=this._positions[3*Z+2];this._positions[3*Z+0]=R[0]*n+R[1]*d+R[2]*a,this._positions[3*Z+1]=R[3]*n+R[4]*d+R[5]*a,this._positions[3*Z+2]=R[6]*n+R[7]*d+R[8]*a,Q[8*Z+0]=this._positions[3*Z+0],Q[8*Z+1]=this._positions[3*Z+1],Q[8*Z+2]=this._positions[3*Z+2];const V=new k(this._rotations[4*Z+1],this._rotations[4*Z+2],this._rotations[4*Z+3],this._rotations[4*Z+0]),h=W.multiply(V);this._rotations[4*Z+1]=h.x,this._rotations[4*Z+2]=h.y,this._rotations[4*Z+3]=h.z,this._rotations[4*Z+0]=h.w;const X=N.RotationFromQuaternion(new k(this._rotations[4*Z+1],this._rotations[4*Z+2],this._rotations[4*Z+3],-this._rotations[4*Z+0])),B=N.Diagonal(new s(this._scales[3*Z+0],this._scales[3*Z+1],this._scales[3*Z+2])).multiply(X).buffer,m=[B[0]*B[0]+B[3]*B[3]+B[6]*B[6],B[0]*B[1]+B[3]*B[4]+B[6]*B[7],B[0]*B[2]+B[3]*B[5]+B[6]*B[8],B[1]*B[1]+B[4]*B[4]+B[7]*B[7],B[1]*B[2]+B[4]*B[5]+B[7]*B[8],B[2]*B[2]+B[5]*B[5]+B[8]*B[8]];this._data[8*Z+4]=l(4*m[0],4*m[1]),this._data[8*Z+5]=l(4*m[2],4*m[3]),this._data[8*Z+6]=l(4*m[4],4*m[5])}this.dispatchEvent(i)},this.scale=W=>{const R=new Float32Array(this._data.buffer);for(let Q=0;Q<this.vertexCount;Q++){this._positions[3*Q+0]*=W.x,this._positions[3*Q+1]*=W.y,this._positions[3*Q+2]*=W.z,R[8*Q+0]=this._positions[3*Q+0],R[8*Q+1]=this._positions[3*Q+1],R[8*Q+2]=this._positions[3*Q+2],this._scales[3*Q+0]*=W.x,this._scales[3*Q+1]*=W.y,this._scales[3*Q+2]*=W.z;const Z=N.RotationFromQuaternion(new k(this._rotations[4*Q+1],this._rotations[4*Q+2],this._rotations[4*Q+3],-this._rotations[4*Q+0])),n=N.Diagonal(new s(this._scales[3*Q+0],this._scales[3*Q+1],this._scales[3*Q+2])).multiply(Z).buffer,d=[n[0]*n[0]+n[3]*n[3]+n[6]*n[6],n[0]*n[1]+n[3]*n[4]+n[6]*n[7],n[0]*n[2]+n[3]*n[5]+n[6]*n[8],n[1]*n[1]+n[4]*n[4]+n[7]*n[7],n[1]*n[2]+n[4]*n[5]+n[7]*n[8],n[2]*n[2]+n[5]*n[5]+n[8]*n[8]];this._data[8*Q+4]=l(4*d[0],4*d[1]),this._data[8*Q+5]=l(4*d[2],4*d[3]),this._data[8*Q+6]=l(4*d[4],4*d[5])}this.dispatchEvent(i)},this.limitBox=(W,R,Q,Z,n,d)=>{if(W>=R)throw new Error(`xMin (${W}) must be smaller than xMax (${R})`);if(Q>=Z)throw new Error(`yMin (${Q}) must be smaller than yMax (${Z})`);if(n>=d)throw new Error(`zMin (${n}) must be smaller than zMax (${d})`);const a=new Uint8Array(this._vertexCount);for(let h=0;h<this._vertexCount;h++){const X=this._positions[3*h+0],B=this._positions[3*h+1],m=this._positions[3*h+2];X>=W&&X<=R&&B>=Q&&B<=Z&&m>=n&&m<=d&&(a[h]=1)}let V=0;for(let h=0;h<this._vertexCount;h++)a[h]!==0&&(this._data[8*V+0]=this._data[8*h+0],this._data[8*V+1]=this._data[8*h+1],this._data[8*V+2]=this._data[8*h+2],this._data[8*V+3]=this._data[8*h+3],this._data[8*V+4]=this._data[8*h+4],this._data[8*V+5]=this._data[8*h+5],this._data[8*V+6]=this._data[8*h+6],this._data[8*V+7]=this._data[8*h+7],this._positions[3*V+0]=this._positions[3*h+0],this._positions[3*V+1]=this._positions[3*h+1],this._positions[3*V+2]=this._positions[3*h+2],this._rotations[4*V+0]=this._rotations[4*h+0],this._rotations[4*V+1]=this._rotations[4*h+1],this._rotations[4*V+2]=this._rotations[4*h+2],this._rotations[4*V+3]=this._rotations[4*h+3],this._scales[3*V+0]=this._scales[3*h+0],this._scales[3*V+1]=this._scales[3*h+1],this._scales[3*V+2]=this._scales[3*h+2],V+=1);this._height=Math.ceil(2*V/this._width),this._vertexCount=V,this._data=new Uint32Array(this._data.buffer,0,this._width*this._height*4),this._positions=new Float32Array(this._positions.buffer,0,3*V),this._rotations=new Float32Array(this._rotations.buffer,0,4*V),this._scales=new Float32Array(this._scales.buffer,0,3*V),this.dispatchEvent(i)},this.saveToFile=W=>{if(!document)return;const R=new Uint8Array(this._vertexCount*D.RowLength),Q=new Float32Array(R.buffer),Z=new Uint8Array(R.buffer),n=new Uint8Array(this._data.buffer);for(let V=0;V<this._vertexCount;V++)Q[8*V+0]=this._positions[3*V+0],Q[8*V+1]=this._positions[3*V+1],Q[8*V+2]=this._positions[3*V+2],Z[32*V+24+0]=n[4*(8*V+7)+0],Z[32*V+24+1]=n[4*(8*V+7)+1],Z[32*V+24+2]=n[4*(8*V+7)+2],Z[32*V+24+3]=n[4*(8*V+7)+3],Q[8*V+3+0]=this._scales[3*V+0],Q[8*V+3+1]=this._scales[3*V+1],Q[8*V+3+2]=this._scales[3*V+2],Z[32*V+28+0]=128*this._rotations[4*V+0]+128&255,Z[32*V+28+1]=128*this._rotations[4*V+1]+128&255,Z[32*V+28+2]=128*this._rotations[4*V+2]+128&255,Z[32*V+28+3]=128*this._rotations[4*V+3]+128&255;const d=new Blob([R.buffer],{type:"application/octet-stream"}),a=document.createElement("a");a.download=W,a.href=URL.createObjectURL(d),a.click()}}get data(){return this._data}get vertexCount(){return this._vertexCount}get width(){return this._width}get height(){return this._height}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}}D.RowLength=32;class dF{static async LoadAsync(U,F,t){const l=await fetch(U,{mode:"cors",credentials:"omit"});if(l.status!=200)throw new Error(l.status+" Unable to load "+l.url);const i=l.body.getReader(),W=parseInt(l.headers.get("content-length")),R=new Uint8Array(W);let Q=0;for(;;){const{done:Z,value:n}=await i.read();if(Z)break;R.set(n,Q),Q+=n.length,t==null||t(Q/W)}F.setData(R)}static async LoadFromFileAsync(U,F,t){const l=new FileReader;l.onload=i=>{const W=new Uint8Array(i.target.result);F.setData(W)},l.onprogress=i=>{t==null||t(i.loaded/i.total)},l.readAsArrayBuffer(U),await new Promise(i=>{l.onloadend=()=>{i()}})}}function nF(r,U,F){var t=U===void 0?null:U,l=function(Q,Z){var n=atob(Q);if(Z){for(var d=new Uint8Array(n.length),a=0,V=n.length;a<V;++a)d[a]=n.charCodeAt(a);return String.fromCharCode.apply(null,new Uint16Array(d.buffer))}return n}(r,F!==void 0&&F),i=l.indexOf(`
`,10)+1,W=l.substring(i)+(t?"//# sourceMappingURL="+t:""),R=new Blob([W],{type:"application/javascript"});return URL.createObjectURL(R)}var _,q,$,O,RF=(_="",q=null,$=!1,function(r){return O=O||nF(_,q,$),new Worker(O,r)});class WF{constructor(U=1){let F,t,l,i=0,W=!1;this.init=(R,Q)=>{i=0,W=!0,F=R,t=R.gl.getUniformLocation(Q,"u_useDepthFade"),F.gl.uniform1i(t,1),l=R.gl.getUniformLocation(Q,"u_depthFade"),F.gl.uniform1f(l,i)},this.render=()=>{W&&(i=Math.min(i+.01*U,1),i>=1&&(W=!1,F.gl.uniform1i(t,0)),F.gl.uniform1f(l,i))}}}class iF{constructor(U=null,F=null){const t=U||document.createElement("canvas");U||(t.style.display="block",t.style.boxSizing="border-box",t.style.width="100%",t.style.height="100%",t.style.margin="0",t.style.padding="0",document.body.appendChild(t)),t.style.background="#000",this.domElement=t;const l=t.getContext("webgl2",{antialias:!1});this.gl=l;const i=F||[];let W,R,Q,Z,n,d,a,V,h,X,B,m,b,c;F||i.push(new WF);let T=!1;this.resize=()=>{const S=t.clientWidth,Y=t.clientHeight;t.width===S&&t.height===Y||this.setSize(S,Y)},this.setSize=(S,Y)=>{t.width=S,t.height=Y,R&&(l.viewport(0,0,t.width,t.height),R.update(t.width,t.height),a=l.getUniformLocation(d,"projection"),l.uniformMatrix4fv(a,!1,R.projectionMatrix.buffer),V=l.getUniformLocation(d,"viewport"),l.uniform2fv(V,new Float32Array([t.width,t.height])))};const M=()=>{Q=new RF;const S={positions:W.positions,vertexCount:W.vertexCount};Q.postMessage({scene:S}),l.viewport(0,0,t.width,t.height),Z=l.createShader(l.VERTEX_SHADER),l.shaderSource(Z,`#version 300 es
precision highp float;
precision highp int;

uniform highp usampler2D u_texture;
uniform mat4 projection, view;
uniform vec2 focal;
uniform vec2 viewport;

uniform bool u_useDepthFade;
uniform float u_depthFade;

in vec2 position;
in int index;

out vec4 vColor;
out vec2 vPosition;

void main () {
    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);
    vec4 cam = view * vec4(uintBitsToFloat(cen.xyz), 1);
    vec4 pos2d = projection * cam;

    float clip = 1.2 * pos2d.w;
    if (pos2d.z < -pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {
        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);
        return;
    }


    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);
    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);
    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);

    mat3 J = mat3(
        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), 
        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), 
        0., 0., 0.
    );

    mat3 T = transpose(mat3(view)) * J;
    mat3 cov2d = transpose(T) * Vrk * T;

    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;
    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));
    float lambda1 = mid + radius, lambda2 = mid - radius;

    if(lambda2 < 0.0) return;
    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));
    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;
    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);

    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;
    vPosition = position;

    float scalingFactor = 1.0;

    if(u_useDepthFade) {
        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;
        float near = 0.1; float far = 100.0;
        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));
        float start = max(normalizedDepth - 0.1, 0.0);
        float end = min(normalizedDepth + 0.1, 1.0);
        scalingFactor = clamp((u_depthFade - start) / (end - start), 0.0, 1.0);
    }

    vec2 vCenter = vec2(pos2d) / pos2d.w;
    gl_Position = vec4(
        vCenter 
        + position.x * majorAxis * scalingFactor / viewport 
        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);

}
`),l.compileShader(Z),l.getShaderParameter(Z,l.COMPILE_STATUS)||console.error(l.getShaderInfoLog(Z)),n=l.createShader(l.FRAGMENT_SHADER),l.shaderSource(n,`#version 300 es
precision highp float;

in vec4 vColor;
in vec2 vPosition;

out vec4 fragColor;

void main () {
    float A = -dot(vPosition, vPosition);
    if (A < -4.0) discard;
    float B = exp(A) * vColor.a;
    fragColor = vec4(B * vColor.rgb, B);
}
`),l.compileShader(n),l.getShaderParameter(n,l.COMPILE_STATUS)||console.error(l.getShaderInfoLog(n)),d=l.createProgram(),l.attachShader(d,Z),l.attachShader(d,n),l.linkProgram(d),l.useProgram(d),l.getProgramParameter(d,l.LINK_STATUS)||console.error(l.getProgramInfoLog(d)),l.disable(l.DEPTH_TEST),l.enable(l.BLEND),l.blendFuncSeparate(l.ONE_MINUS_DST_ALPHA,l.ONE,l.ONE_MINUS_DST_ALPHA,l.ONE),l.blendEquationSeparate(l.FUNC_ADD,l.FUNC_ADD),R.update(t.width,t.height),a=l.getUniformLocation(d,"projection"),l.uniformMatrix4fv(a,!1,R.projectionMatrix.buffer),V=l.getUniformLocation(d,"viewport"),l.uniform2fv(V,new Float32Array([t.width,t.height])),h=l.getUniformLocation(d,"focal"),l.uniform2fv(h,new Float32Array([R.fx,R.fy])),X=l.getUniformLocation(d,"view"),l.uniformMatrix4fv(X,!1,R.viewMatrix.buffer);const Y=new Float32Array([-2,-2,2,-2,2,2,-2,2]);c=l.createBuffer(),l.bindBuffer(l.ARRAY_BUFFER,c),l.bufferData(l.ARRAY_BUFFER,Y,l.STATIC_DRAW),m=l.getAttribLocation(d,"position"),l.enableVertexAttribArray(m),l.vertexAttribPointer(m,2,l.FLOAT,!1,0,0);const E=l.createTexture();l.bindTexture(l.TEXTURE_2D,E),B=l.getUniformLocation(d,"u_texture"),l.uniform1i(B,0);const w=l.createBuffer();b=l.getAttribLocation(d,"index"),l.enableVertexAttribArray(b),l.bindBuffer(l.ARRAY_BUFFER,w),l.vertexAttribIPointer(b,1,l.INT,0,0),l.vertexAttribDivisor(b,1),l.bindTexture(l.TEXTURE_2D,E),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32UI,W.width,W.height,0,l.RGBA_INTEGER,l.UNSIGNED_INT,W.data),l.activeTexture(l.TEXTURE0),l.bindTexture(l.TEXTURE_2D,E);for(const x of i)x.init(this,d);Q.onmessage=x=>{if(x.data.depthIndex){const{depthIndex:K}=x.data;l.bindBuffer(l.ARRAY_BUFFER,w),l.bufferData(l.ARRAY_BUFFER,K,l.STATIC_DRAW)}},T=!0},g=()=>{T&&this.dispose(),M()};this.render=(S,Y)=>{if(S===W&&Y===R||(T&&this.dispose(),R=Y,S!==W&&(W&&W.removeEventListener("change",g),W=S,W.addEventListener("change",g)),M()),R.update(t.width,t.height),Q.postMessage({viewProj:R.viewProj}),W.vertexCount>0){for(const E of i)E.render();l.uniformMatrix4fv(X,!1,R.viewMatrix.buffer),l.clear(l.COLOR_BUFFER_BIT),l.drawArraysInstanced(l.TRIANGLE_FAN,0,4,W.vertexCount)}else l.clear(l.COLOR_BUFFER_BIT)},this.dispose=()=>{T&&(Q.terminate(),l.deleteShader(Z),l.deleteShader(n),l.deleteProgram(d),l.deleteBuffer(c),l.deleteBuffer(void 0),l.deleteBuffer(void 0),l.deleteBuffer(void 0),l.deleteBuffer(void 0),T=!1)},this.resize()}}class eF{constructor(U,F,t=.5,l=.5,i=5,W=!0,R=new s){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{},this.attach=()=>{},this.detach=()=>{};let Q=R.clone(),Z=Q.clone(),n=t,d=l,a=i,V=!1,h=!1,X=0,B=0,m=0;const b={};let c=null,T=!1;const M=()=>{if(!c||T)return;const e=c.rotation.toEuler();n=-e.y,d=-e.x;const J=c.position.x-a*Math.sin(n)*Math.cos(d),o=c.position.y+a*Math.sin(d),G=c.position.z+a*Math.cos(n)*Math.cos(d);Z=new s(J,o,G)};this.attach=e=>{c&&this.detach(),c=e,c.addEventListener("change",M)},this.detach=()=>{c&&(c.removeEventListener("change",M),c=null)},this.attach(U),this.setCameraTarget=e=>{if(!c)return;const J=e.x-c.position.x,o=e.y-c.position.y,G=e.z-c.position.z;a=Math.sqrt(J*J+o*o+G*G),d=Math.atan2(o,Math.sqrt(J*J+G*G)),n=-Math.atan2(J,G),Z=new s(e.x,e.y,e.z)};const g=()=>.1+.9*(a-this.minZoom)/(this.maxZoom-this.minZoom),S=e=>{b[e.code]=!0,e.code==="ArrowUp"&&(b.KeyW=!0),e.code==="ArrowDown"&&(b.KeyS=!0),e.code==="ArrowLeft"&&(b.KeyA=!0),e.code==="ArrowRight"&&(b.KeyD=!0)},Y=e=>{b[e.code]=!1,e.code==="ArrowUp"&&(b.KeyW=!1),e.code==="ArrowDown"&&(b.KeyS=!1),e.code==="ArrowLeft"&&(b.KeyA=!1),e.code==="ArrowRight"&&(b.KeyD=!1)},E=e=>{p(e),V=!0,h=e.button===2,B=e.clientX,m=e.clientY,window.addEventListener("mouseup",w)},w=e=>{p(e),V=!1,h=!1,window.removeEventListener("mouseup",w)},x=e=>{if(p(e),!V||!c)return;const J=e.clientX-B,o=e.clientY-m;if(h){const G=g(),v=-J*this.panSpeed*.01*G,z=-o*this.panSpeed*.01*G,y=N.RotationFromQuaternion(c.rotation).buffer,C=new s(y[0],y[3],y[6]),u=new s(y[1],y[4],y[7]);Z=Z.add(C.multiply(v)),Z=Z.add(u.multiply(z))}else n-=J*this.orbitSpeed*.003,d+=o*this.orbitSpeed*.003,d=Math.min(Math.max(d,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);B=e.clientX,m=e.clientY},K=e=>{p(e);const J=g();a+=e.deltaY*this.zoomSpeed*.025*J,a=Math.min(Math.max(a,this.minZoom),this.maxZoom)},P=e=>{if(p(e),e.touches.length===1)V=!0,h=!1,B=e.touches[0].clientX,m=e.touches[0].clientY,X=0;else if(e.touches.length===2){V=!0,h=!0,B=(e.touches[0].clientX+e.touches[1].clientX)/2,m=(e.touches[0].clientY+e.touches[1].clientY)/2;const J=e.touches[0].clientX-e.touches[1].clientX,o=e.touches[0].clientY-e.touches[1].clientY;X=Math.sqrt(J*J+o*o)}},L=e=>{p(e),V=!1,h=!1},A=e=>{if(p(e),V&&c)if(h){const J=g(),o=e.touches[0].clientX-e.touches[1].clientX,G=e.touches[0].clientY-e.touches[1].clientY,v=Math.sqrt(o*o+G*G);a+=(X-v)*this.zoomSpeed*.1*J,a=Math.min(Math.max(a,this.minZoom),this.maxZoom),X=v;const z=(e.touches[0].clientX+e.touches[1].clientX)/2,y=(e.touches[0].clientY+e.touches[1].clientY)/2,C=z-B,u=y-m,I=N.RotationFromQuaternion(c.rotation).buffer,j=new s(I[0],I[3],I[6]),QF=new s(I[1],I[4],I[7]);Z=Z.add(j.multiply(-C*this.panSpeed*.025*J)),Z=Z.add(QF.multiply(-u*this.panSpeed*.025*J)),B=z,m=y}else{const J=e.touches[0].clientX-B,o=e.touches[0].clientY-m;n-=J*this.orbitSpeed*.003,d+=o*this.orbitSpeed*.003,d=Math.min(Math.max(d,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),B=e.touches[0].clientX,m=e.touches[0].clientY}},f=(e,J,o)=>(1-o)*e+o*J;this.update=()=>{if(!c)return;T=!0,t=f(t,n,this.dampening),l=f(l,d,this.dampening),i=f(i,a,this.dampening),Q=Q.lerp(Z,this.dampening);const e=Q.x+i*Math.sin(t)*Math.cos(l),J=Q.y-i*Math.sin(l),o=Q.z-i*Math.cos(t)*Math.cos(l);c.position=new s(e,J,o);const G=Q.subtract(c.position).normalize(),v=Math.asin(-G.y),z=Math.atan2(G.x,G.z);c.rotation=k.FromEuler(new s(v,z,0));const y=.025,C=.01,u=N.RotationFromQuaternion(c.rotation).buffer,I=new s(-u[2],-u[5],-u[8]),j=new s(u[0],u[3],u[6]);b.KeyS&&(Z=Z.add(I.multiply(y))),b.KeyW&&(Z=Z.subtract(I.multiply(y))),b.KeyA&&(Z=Z.subtract(j.multiply(y))),b.KeyD&&(Z=Z.add(j.multiply(y))),b.KeyE&&(n+=C),b.KeyQ&&(n-=C),b.KeyR&&(d+=C),b.KeyF&&(d-=C),T=!1};const p=e=>{e.preventDefault(),e.stopPropagation()};this.dispose=()=>{F.removeEventListener("dragenter",p),F.removeEventListener("dragover",p),F.removeEventListener("dragleave",p),F.removeEventListener("contextmenu",p),F.removeEventListener("mousedown",E),F.removeEventListener("mousemove",x),F.removeEventListener("wheel",K),F.removeEventListener("touchstart",P),F.removeEventListener("touchend",L),F.removeEventListener("touchmove",A),W&&(window.removeEventListener("keydown",S),window.removeEventListener("keyup",Y))},W&&(window.addEventListener("keydown",S),window.addEventListener("keyup",Y)),F.addEventListener("dragenter",p),F.addEventListener("dragover",p),F.addEventListener("dragleave",p),F.addEventListener("contextmenu",p),F.addEventListener("mousedown",E),F.addEventListener("mousemove",x),F.addEventListener("wheel",K),F.addEventListener("touchstart",P),F.addEventListener("touchend",L),F.addEventListener("touchmove",A),this.update()}}const FF=new D,lF=new VF,tF=new iF,BF=new eF(lF,tF.domElement);async function hF(){const r="https://huggingface.co/datasets/dylanebert/3dgs/resolve/main/bonsai/bonsai-7k.splat";await dF.LoadAsync(r,FF,()=>{});const U=()=>{BF.update(),tF.render(FF,lF),requestAnimationFrame(U)};requestAnimationFrame(U)}hF();
